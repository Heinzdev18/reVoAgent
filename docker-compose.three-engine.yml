# docker-compose.three-engine.yml
# reVoAgent Complete Production Stack
# Three-Engine Architecture with Memory Integration

version: '3.8'

services:
  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================
  
  postgres:
    image: postgres:15
    container_name: revoagent-postgres
    environment:
      POSTGRES_DB: revoagent
      POSTGRES_USER: revoagent_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - revoagent-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U revoagent_user -d revoagent"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: revoagent-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - revoagent-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # BACKEND SERVICES
  # =============================================================================

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: revoagent-backend
    environment:
      - DATABASE_URL=postgresql://revoagent_user:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/revoagent
      - REDIS_HOST=redis
      - JWT_SECRET=${JWT_SECRET:-your-super-secure-jwt-secret-key}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - GITHUB_TOKEN=${GITHUB_TOKEN:-}
      - SLACK_TOKEN=${SLACK_TOKEN:-}
      - JIRA_URL=${JIRA_URL:-}
      - ENVIRONMENT=production
    ports:
      - "12000:12000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - revoagent-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:12000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # =============================================================================
  # FRONTEND SERVICE
  # =============================================================================

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: revoagent-frontend
    environment:
      - VITE_API_URL=http://localhost:12000
      - VITE_WS_URL=ws://localhost:12000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - revoagent-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # =============================================================================
  # MONITORING SERVICES
  # =============================================================================

  prometheus:
    image: prom/prometheus:latest
    container_name: revoagent-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - revoagent-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: revoagent-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboard.json:/var/lib/grafana/dashboards/revoagent.json
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - revoagent-network
    restart: unless-stopped

  # =============================================================================
  # NGINX REVERSE PROXY
  # =============================================================================

  nginx:
    image: nginx:alpine
    container_name: revoagent-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - revoagent-network
    restart: unless-stopped

  # =============================================================================
  # ELASTICSEARCH & KIBANA (Optional - for advanced logging)
  # =============================================================================

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: revoagent-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - revoagent-network
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: revoagent-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - revoagent-network
    restart: unless-stopped

# =============================================================================
# VOLUMES
# =============================================================================

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================

networks:
  revoagent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16