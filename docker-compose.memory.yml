# docker-compose.memory.yml
# Complete production deployment with Cognee memory integration

version: '3.8'

services:
  # Main reVoAgent backend with memory
  revoagent-backend:
    build:
      context: .
      dockerfile: Dockerfile.memory
      args:
        - ENVIRONMENT=production
        - ENABLE_MEMORY=true
    image: revoagent/backend-memory:latest
    container_name: revoagent-backend-memory
    restart: unless-stopped
    environment:
      # Memory Configuration
      - ENABLE_MEMORY=true
      - COGNEE_LOCAL_MODELS=true
      - COGNEE_VECTOR_DB=lancedb
      - COGNEE_GRAPH_DB=networkx
      - COGNEE_RELATIONAL_DB=postgres
      
      # Database Configuration
      - DATABASE_URL=postgresql://revoagent:${DB_PASSWORD}@postgres:5432/revoagent_memory
      - REDIS_URL=redis://redis:6379/0
      
      # Model Configuration
      - LOCAL_MODELS_PATH=/app/data/models
      - DEEPSEEK_MODEL_PATH=/app/data/models/deepseek-r1
      - LLAMA_MODEL_PATH=/app/data/models/llama-3.1-70b
      
      # API Configuration
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - WORKERS=4
      - LOG_LEVEL=info
      
      # Security
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      
      # External Integrations
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - SLACK_TOKEN=${SLACK_TOKEN}
      - JIRA_URL=${JIRA_URL}
      - JIRA_TOKEN=${JIRA_TOKEN}
      
      # Monitoring
      - PROMETHEUS_ENABLED=true
      - GRAFANA_ENABLED=true
      
    volumes:
      - ./data/models:/app/data/models:ro
      - ./data/cognee_memory:/app/data/cognee_memory
      - ./logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - revoagent-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database for Memory Storage
  postgres:
    image: postgres:15-alpine
    container_name: revoagent-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=revoagent_memory
      - POSTGRES_USER=revoagent
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database_configs.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - revoagent-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U revoagent -d revoagent_memory"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching and Session Management
  redis:
    image: redis:7-alpine
    container_name: revoagent-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - revoagent-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Frontend with Memory Components
  revoagent-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=http://localhost:8000
        - REACT_APP_WS_URL=ws://localhost:8000
        - REACT_APP_MEMORY_ENABLED=true
    image: revoagent/frontend-memory:latest
    container_name: revoagent-frontend-memory
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - revoagent-backend
    networks:
      - revoagent-network
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
      - REACT_APP_MEMORY_ENABLED=true

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: revoagent-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - revoagent-backend
      - revoagent-frontend
    networks:
      - revoagent-network

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: revoagent-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - revoagent-network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: revoagent-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboard.json:/etc/grafana/provisioning/dashboards/dashboard.json:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - revoagent-network

  # Vector Database (LanceDB runs embedded, but we can add Qdrant as alternative)
  qdrant:
    image: qdrant/qdrant:latest
    container_name: revoagent-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - revoagent-network
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334

  # Neo4j Graph Database (Optional - for advanced graph operations)
  neo4j:
    image: neo4j:5-community
    container_name: revoagent-neo4j
    restart: unless-stopped
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    ports:
      - "7474:7474"
      - "7687:7687"
    networks:
      - revoagent-network

  # Log Aggregation with ELK Stack (Optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: revoagent-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - revoagent-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: revoagent-logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    depends_on:
      - elasticsearch
    networks:
      - revoagent-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: revoagent-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - revoagent-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  qdrant_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  revoagent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16