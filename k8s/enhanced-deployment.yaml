apiVersion: v1
kind: Namespace
metadata:
  name: revoagent
  labels:
    name: revoagent
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: revoagent-config
  namespace: revoagent
data:
  redis.conf: |
    bind 0.0.0.0
    port 6379
    protected-mode no
    maxmemory 1gb
    maxmemory-policy allkeys-lru
    appendonly yes
    appendfsync everysec
  nginx.conf: |
    upstream backend {
      least_conn;
      server revoagent-backend:12001;
    }
    server {
      listen 80;
      location /api/ {
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
      }
    }
---
apiVersion: v1
kind: Secret
metadata:
  name: revoagent-secrets
  namespace: revoagent
type: Opaque
data:
  postgres-password: cmV2b2FnZW50X3NlY3VyZV9wYXNzd29yZA==  # revoagent_secure_password
  openai-api-key: ""  # Base64 encoded OpenAI API key
  anthropic-api-key: ""  # Base64 encoded Anthropic API key
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data
  namespace: revoagent
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-data
  namespace: revoagent
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: revoagent-redis
  namespace: revoagent
  labels:
    app: revoagent-redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: revoagent-redis
  template:
    metadata:
      labels:
        app: revoagent-redis
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /usr/local/etc/redis/redis.conf
          subPath: redis.conf
        command:
        - redis-server
        - /usr/local/etc/redis/redis.conf
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      - name: redis-exporter
        image: oliver006/redis_exporter:latest
        ports:
        - containerPort: 9121
          name: metrics
        env:
        - name: REDIS_ADDR
          value: "redis://localhost:6379"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data
      - name: redis-config
        configMap:
          name: revoagent-config
---
apiVersion: v1
kind: Service
metadata:
  name: revoagent-redis
  namespace: revoagent
  labels:
    app: revoagent-redis
spec:
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  - port: 9121
    targetPort: 9121
    name: metrics
  selector:
    app: revoagent-redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: revoagent-postgres
  namespace: revoagent
  labels:
    app: revoagent-postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: revoagent-postgres
  template:
    metadata:
      labels:
        app: revoagent-postgres
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          value: revoagent
        - name: POSTGRES_USER
          value: revoagent
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: revoagent-secrets
              key: postgres-password
        - name: POSTGRES_INITDB_ARGS
          value: "--auth-host=scram-sha-256"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - revoagent
            - -d
            - revoagent
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - revoagent
            - -d
            - revoagent
          initialDelaySeconds: 5
          periodSeconds: 5
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:latest
        ports:
        - containerPort: 9187
          name: metrics
        env:
        - name: DATA_SOURCE_NAME
          value: "postgresql://revoagent:$(POSTGRES_PASSWORD)@localhost:5432/revoagent?sslmode=disable"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: revoagent-secrets
              key: postgres-password
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-data
---
apiVersion: v1
kind: Service
metadata:
  name: revoagent-postgres
  namespace: revoagent
  labels:
    app: revoagent-postgres
spec:
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  - port: 9187
    targetPort: 9187
    name: metrics
  selector:
    app: revoagent-postgres
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: revoagent-backend
  namespace: revoagent
  labels:
    app: revoagent-backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: revoagent-backend
  template:
    metadata:
      labels:
        app: revoagent-backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "12001"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: backend
        image: revoagent/backend:latest
        ports:
        - containerPort: 12001
          name: http
        env:
        - name: REDIS_URL
          value: "redis://revoagent-redis:6379"
        - name: DATABASE_URL
          value: "postgresql://revoagent:$(POSTGRES_PASSWORD)@revoagent-postgres:5432/revoagent"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: revoagent-secrets
              key: postgres-password
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: revoagent-secrets
              key: openai-api-key
              optional: true
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: revoagent-secrets
              key: anthropic-api-key
              optional: true
        - name: REVOAGENT_MODE
          value: "production"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health/live
            port: 12001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 12001
          initialDelaySeconds: 10
          periodSeconds: 5
        startupProbe:
          httpGet:
            path: /health/ready
            port: 12001
          initialDelaySeconds: 10
          periodSeconds: 5
          failureThreshold: 30
---
apiVersion: v1
kind: Service
metadata:
  name: revoagent-backend
  namespace: revoagent
  labels:
    app: revoagent-backend
spec:
  ports:
  - port: 12001
    targetPort: 12001
    name: http
  selector:
    app: revoagent-backend
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: revoagent-backend-hpa
  namespace: revoagent
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: revoagent-backend
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: revoagent_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: revoagent-nginx
  namespace: revoagent
  labels:
    app: revoagent-nginx
spec:
  replicas: 2
  selector:
    matchLabels:
      app: revoagent-nginx
  template:
    metadata:
      labels:
        app: revoagent-nginx
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
          name: http
        - containerPort: 8080
          name: metrics
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /nginx-health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /nginx-health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: nginx-config
        configMap:
          name: revoagent-config
---
apiVersion: v1
kind: Service
metadata:
  name: revoagent-nginx
  namespace: revoagent
  labels:
    app: revoagent-nginx
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80
    name: http
  - port: 8080
    targetPort: 8080
    name: metrics
  selector:
    app: revoagent-nginx
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: revoagent-ingress
  namespace: revoagent
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
  - hosts:
    - revoagent.example.com
    secretName: revoagent-tls
  rules:
  - host: revoagent.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: revoagent-nginx
            port:
              number: 80
---
apiVersion: v1
kind: ServiceMonitor
metadata:
  name: revoagent-monitoring
  namespace: revoagent
  labels:
    app: revoagent
spec:
  selector:
    matchLabels:
      app: revoagent-backend
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: revoagent-backend-pdb
  namespace: revoagent
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: revoagent-backend
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: revoagent-nginx-pdb
  namespace: revoagent
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: revoagent-nginx