# docker-compose.production.yml
# reVoAgent Complete Production Stack
# Three-Engine Architecture with Memory Integration

version: '3.8'

services:
  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================
  
  postgres:
    image: pgvector/pgvector:pg15
    container_name: revoagent-postgres
    environment:
      POSTGRES_DB: revoagent
      POSTGRES_USER: revoagent_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - revoagent-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U revoagent_user -d revoagent"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: revoagent-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - revoagent-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # BACKEND API SERVICE
  # =============================================================================

  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    container_name: revoagent-backend
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://revoagent_user:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/revoagent
      REDIS_URL: redis://redis:6379
      
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET:-your-super-secure-jwt-secret-key}
      JWT_ALGORITHM: HS256
      
      # API Keys for Fallback Models
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      
      # External Integrations
      GITHUB_TOKEN: ${GITHUB_TOKEN:-}
      SLACK_TOKEN: ${SLACK_TOKEN:-}
      JIRA_URL: ${JIRA_URL:-}
      JIRA_TOKEN: ${JIRA_TOKEN:-}
      
      # Application Configuration
      APP_ENV: production
      LOG_LEVEL: INFO
      WORKERS: 4
      MAX_REQUESTS: 1000
      TIMEOUT: 300
      
      # Three-Engine Configuration
      MEMORY_ENGINE_ENABLED: true
      PARALLEL_ENGINE_ENABLED: true
      CREATIVE_ENGINE_ENABLED: true
      
      # Model Configuration
      ENABLE_LOCAL_MODELS: true
      ENABLE_QUANTIZATION: true
      MODEL_CACHE_SIZE: 2048
      
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
      - model_cache:/app/.cache
    ports:
      - "12000:12000"
    networks:
      - revoagent-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:12000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped

  # =============================================================================
  # FRONTEND SERVICE
  # =============================================================================

  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: http://localhost:12000
        REACT_APP_WS_URL: ws://localhost:12000
    container_name: revoagent-frontend
    ports:
      - "3000:80"
    networks:
      - revoagent-network
    depends_on:
      backend:
        condition: service_healthy
    environment:
      NGINX_HOST: localhost
      NGINX_PORT: 80
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # =============================================================================
  # MONITORING SERVICES
  # =============================================================================

  prometheus:
    image: prom/prometheus:latest
    container_name: revoagent-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - revoagent-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: revoagent-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - revoagent-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # =============================================================================
  # REVERSE PROXY
  # =============================================================================

  nginx:
    image: nginx:alpine
    container_name: revoagent-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    networks:
      - revoagent-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

  # =============================================================================
  # MEMORY ENGINE SERVICES
  # =============================================================================

  lancedb:
    image: lancedb/lancedb:latest
    container_name: revoagent-lancedb
    environment:
      LANCE_DB_PATH: /data
    volumes:
      - lancedb_data:/data
    ports:
      - "8001:8000"
    networks:
      - revoagent-network
    restart: unless-stopped

  # Knowledge Graph Service
  neo4j:
    image: neo4j:5-community
    container_name: revoagent-neo4j
    environment:
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD:-password123}
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_security_procedures_unrestricted: gds.*,apoc.*
      NEO4J_dbms_memory_heap_initial__size: 512m
      NEO4J_dbms_memory_heap_max__size: 2G
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - revoagent-network
    restart: unless-stopped

  # =============================================================================
  # MESSAGE QUEUE (for async processing)
  # =============================================================================

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: revoagent-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-revoagent}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-password123}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - revoagent-network
    restart: unless-stopped

  # =============================================================================
  # WORKER SERVICES (for parallel processing)
  # =============================================================================

  worker:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile.worker
    environment:
      DATABASE_URL: postgresql://revoagent_user:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/revoagent
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-revoagent}:${RABBITMQ_PASSWORD:-password123}@rabbitmq:5672/
      WORKER_TYPE: parallel_engine
    volumes:
      - ./models:/app/models
      - model_cache:/app/.cache
    networks:
      - revoagent-network
    depends_on:
      - postgres
      - redis
      - rabbitmq
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
    restart: unless-stopped

  # =============================================================================
  # LOG AGGREGATION
  # =============================================================================

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: revoagent-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - revoagent-network
    restart: unless-stopped

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: revoagent-logstash
    volumes:
      - ./monitoring/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./logs:/logs
    ports:
      - "5000:5000"
    networks:
      - revoagent-network
    depends_on:
      - elasticsearch
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: revoagent-kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - revoagent-network
    depends_on:
      - elasticsearch
    restart: unless-stopped

# =============================================================================
# NETWORKS
# =============================================================================

networks:
  revoagent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# VOLUMES
# =============================================================================

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  lancedb_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  model_cache:
    driver: local

---
# docker-compose.development.yml
# Development environment with hot reload

version: '3.8'

services:
  postgres-dev:
    image: pgvector/pgvector:pg15
    container_name: revoagent-postgres-dev
    environment:
      POSTGRES_DB: revoagent_dev
      POSTGRES_USER: dev_user
      POSTGRES_PASSWORD: dev_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - revoagent-dev-network

  redis-dev:
    image: redis:7-alpine
    container_name: revoagent-redis-dev
    ports:
      - "6380:6379"
    networks:
      - revoagent-dev-network

  backend-dev:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile.dev
    container_name: revoagent-backend-dev
    environment:
      DATABASE_URL: postgresql://dev_user:dev_password@postgres-dev:5432/revoagent_dev
      REDIS_URL: redis://redis-dev:6379
      JWT_SECRET: dev-jwt-secret
      APP_ENV: development
      LOG_LEVEL: DEBUG
      RELOAD: true
    volumes:
      - ./apps/backend:/app
      - ./models:/app/models
      - ./logs:/app/logs
    ports:
      - "12001:12000"
    networks:
      - revoagent-dev-network
    depends_on:
      - postgres-dev
      - redis-dev
    command: uvicorn main:app --host 0.0.0.0 --port 12000 --reload

  frontend-dev:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile.dev
    container_name: revoagent-frontend-dev
    environment:
      REACT_APP_API_URL: http://localhost:12001
      REACT_APP_WS_URL: ws://localhost:12001
      CHOKIDAR_USEPOLLING: true
    volumes:
      - ./apps/frontend:/app
      - /app/node_modules
    ports:
      - "3001:3000"
    networks:
      - revoagent-dev-network
    depends_on:
      - backend-dev
    command: npm start

networks:
  revoagent-dev-network:
    driver: bridge

volumes:
  postgres_dev_data:
    driver: local

---
# docker-compose.memory.yml
# Enhanced memory-enabled deployment

version: '3.8'

services:
  # Include all services from production
  postgres:
    extends:
      file: docker-compose.production.yml
      service: postgres

  redis:
    extends:
      file: docker-compose.production.yml
      service: redis

  backend:
    extends:
      file: docker-compose.production.yml
      service: backend
    environment:
      # Memory-specific configuration
      MEMORY_ENGINE_ENABLED: true
      MEMORY_ENGINE_TYPE: cognee
      LANCEDB_URL: http://lancedb:8000
      NEO4J_URL: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-password123}
      
      # Enhanced memory settings
      MEMORY_RETENTION_DAYS: 30
      MEMORY_MAX_ENTITIES: 10000000
      MEMORY_EMBEDDING_MODEL: sentence-transformers/all-MiniLM-L6-v2
      MEMORY_CHUNK_SIZE: 512
      MEMORY_OVERLAP_SIZE: 50

  # Memory-specific services
  lancedb:
    extends:
      file: docker-compose.production.yml
      service: lancedb

  neo4j:
    extends:
      file: docker-compose.production.yml
      service: neo4j

  # Memory processing worker
  memory-worker:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile.memory
    environment:
      DATABASE_URL: postgresql://revoagent_user:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/revoagent
      REDIS_URL: redis://redis:6379
      LANCEDB_URL: http://lancedb:8000
      NEO4J_URL: bolt://neo4j:7687
      WORKER_TYPE: memory_processor
    volumes:
      - ./models:/app/models
      - model_cache:/app/.cache
    networks:
      - revoagent-network
    depends_on:
      - postgres
      - redis
      - lancedb
      - neo4j
    deploy:
      replicas: 2
    restart: unless-stopped

networks:
  revoagent-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  lancedb_data:
  neo4j_data:
  neo4j_logs:
  model_cache: