name: Production Deployment Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Quality Checks
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Security hardening check
        run: |
          python security/security_validation.py
          python security/security_hardening.py

  # Unit and Integration Tests
  test:
    runs-on: ubuntu-latest
    needs: security-scan
    strategy:
      matrix:
        python-version: [3.11, 3.12]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-ai.txt
          pip install pytest pytest-asyncio pytest-cov

      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --cov=src --cov-report=xml

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --maxfail=5

      - name: Run system validation
        run: |
          python comprehensive_system_validation.py

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install locust pytest-benchmark

      - name: Run performance tests
        run: |
          python performance/ultimate_optimization.py
          python performance/quick_performance_validation.py

      - name: Load testing
        run: |
          python tests/load/enterprise_load_test.py

  # Build and Push Docker Images
  build:
    runs-on: ubuntu-latest
    needs: [test, performance-test]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Deploy to staging
        run: |
          # Update image tag in deployment
          sed -i "s|IMAGE_TAG|${{ needs.build.outputs.image-tag }}|g" k8s/staging-deployment.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f k8s/staging-deployment.yaml
          kubectl apply -f k8s/enhanced-autoscaling.yaml
          
          # Wait for deployment
          kubectl rollout status deployment/revoagent-staging --timeout=300s

      - name: Run smoke tests
        run: |
          python tests/smoke/staging_smoke_test.py

      - name: Performance validation
        run: |
          python tests/performance/staging_performance_test.py

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Blue-Green Deployment
        run: |
          # Update image tag in deployment
          sed -i "s|IMAGE_TAG|${{ needs.build.outputs.image-tag }}|g" k8s/three-engine-deployment.yaml
          
          # Deploy green environment
          kubectl apply -f k8s/three-engine-deployment.yaml
          
          # Wait for green deployment
          kubectl rollout status deployment/revoagent-green --timeout=600s
          
          # Run health checks
          python scripts/health_check.py --environment=green
          
          # Switch traffic to green (blue-green switch)
          kubectl patch service revoagent-service -p '{"spec":{"selector":{"version":"green"}}}'
          
          # Cleanup old blue deployment after successful switch
          sleep 60
          kubectl delete deployment revoagent-blue --ignore-not-found=true

      - name: Post-deployment validation
        run: |
          python tests/smoke/production_smoke_test.py
          python system_health_check.py

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, rolling back..."
          kubectl patch service revoagent-service -p '{"spec":{"selector":{"version":"blue"}}}'
          kubectl delete deployment revoagent-green --ignore-not-found=true

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}