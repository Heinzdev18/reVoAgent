version: '3.8'

services:
  # NGINX Load Balancer
  nginx:
    image: nginx:alpine
    container_name: revoagent-nginx
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Monitoring
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    networks:
      - revoagent-network
    depends_on:
      - backend-1
      - backend-2
      - frontend-1
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend instances for horizontal scaling
  backend-1:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: production
    container_name: revoagent-backend-1
    expose:
      - "12001"
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./config:/app/config
      - ./logs:/app/logs
      - ./temp:/app/temp
    environment:
      - REVOAGENT_CONFIG=/app/config/config.yaml
      - PYTHONPATH=/app/src
      - REVOAGENT_MODE=production
      - REDIS_URL=redis://redis:6379
      - INSTANCE_ID=backend-1
    networks:
      - revoagent-network
    restart: unless-stopped
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:12001/health/ready')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  backend-2:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: production
    container_name: revoagent-backend-2
    expose:
      - "12001"
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./config:/app/config
      - ./logs:/app/logs
      - ./temp:/app/temp
    environment:
      - REVOAGENT_CONFIG=/app/config/config.yaml
      - PYTHONPATH=/app/src
      - REVOAGENT_MODE=production
      - REDIS_URL=redis://redis:6379
      - INSTANCE_ID=backend-2
    networks:
      - revoagent-network
    restart: unless-stopped
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:12001/health/ready')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    profiles:
      - scale

  # Frontend instances
  frontend-1:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: revoagent-frontend-1
    expose:
      - "12000"
    environment:
      - VITE_API_URL=http://nginx/api
      - VITE_WS_URL=ws://nginx/ws
      - VITE_APP_MODE=production
    networks:
      - revoagent-network
    restart: unless-stopped
    depends_on:
      - nginx
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:12000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cluster for high availability
  redis:
    image: redis:7-alpine
    container_name: revoagent-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./deployment/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - revoagent-network
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # PostgreSQL for persistent data
  postgres:
    image: postgres:15-alpine
    container_name: revoagent-postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    environment:
      - POSTGRES_DB=revoagent
      - POSTGRES_USER=revoagent
      - POSTGRES_PASSWORD=revoagent_secure_password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    networks:
      - revoagent-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U revoagent -d revoagent"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: revoagent-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - revoagent-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: revoagent-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
    networks:
      - revoagent-network
    depends_on:
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AlertManager for alerts
  alertmanager:
    image: prom/alertmanager:latest
    container_name: revoagent-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - revoagent-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: revoagent-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - revoagent-network
    restart: unless-stopped

  # Redis Exporter for Redis metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: revoagent-redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    networks:
      - revoagent-network
    depends_on:
      - redis
    restart: unless-stopped

  # Postgres Exporter for database metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: revoagent-postgres-exporter
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://revoagent:revoagent_secure_password@postgres:5432/revoagent?sslmode=disable
    networks:
      - revoagent-network
    depends_on:
      - postgres
    restart: unless-stopped

  # Log aggregation with Loki (optional)
  loki:
    image: grafana/loki:latest
    container_name: revoagent-loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki/loki.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - revoagent-network
    restart: unless-stopped
    profiles:
      - logging

  # Promtail for log collection (optional)
  promtail:
    image: grafana/promtail:latest
    container_name: revoagent-promtail
    volumes:
      - ./monitoring/promtail/promtail.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - nginx-logs:/var/log/nginx:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - revoagent-network
    depends_on:
      - loki
    restart: unless-stopped
    profiles:
      - logging

networks:
  revoagent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:
  alertmanager-data:
  loki-data:
  nginx-logs: